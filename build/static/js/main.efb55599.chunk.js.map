{"version":3,"sources":["provider/GlobalProvider.js","pages/Home.js","images/bscscan.svg","components/Modal.js","components/HeaderComponent.js","images/aim.svg","router/Router.js","App.js","reportWebVitals.js","index.js"],"names":["GlobalContext","React","createContext","GlobalProvider","props","callContractMethod","contractInstance","methodName","a","options","console","log","resultOfCall","code","claim","address","state","whitelist","includes","ethers","utils","getAddress","ethereum","selectedAddress","alert","transactionParameters","to","from","value","data","chainId","request","method","params","init","detectEthereumProvider","provider","setState","window","checkChain","localStorage","getItem","getCurrentAccount","handleAccountsChanged","on","truncate","fullStr","strLen","separator","length","charsToShow","frontChars","Math","ceil","backChars","floor","substr","connect","connectedAccount","currentAccount","currentAccountTrunc","setItem","accounts","bddWallet","handleChainChanged","_chainId","location","reload","actions","Provider","global","this","children","Component","Home","presaleAddress","contributeAmount","gasPrice","gasLimit","presaleStartTime","snipeWalletAddress","countDown","isModalOpen","snipeModal","componentDidMount","context","connectWallet","className","onClick","style","width","lineHeight","marginTop","contextType","HeaderComponent","AppRouter","history","default","path","exact","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.efb55599.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {ethers} from 'ethers';\nimport detectEthereumProvider from \"@metamask/detect-provider\";\n\n\nconst GlobalContext = React.createContext({});\n\nclass GlobalProvider extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            ethereum: null,\n            chainId: null,\n            currentAccount: null,\n            currentAccountTrunc: null,\n            bddWallet: null,\n            whitelist: [\n                \"0x975e2351e0bd4398C59D0a9dab28072D8A09913F\",\n                \"0x8Dd497ea2Da9EF701dE1479947De168C0f34EFc3\",\n                \"0x62578C71e363887Ada5877472839cd00D19452a9\",\n                \"0x6f2f6aDDA0Ff2A9605BAA38A1f245F711Ab10dDD\",\n                \"0x3465EBc49c85D9e33f7Fb2369ca027bD62F50CE6\",\n                \"0xA8256A10E243DAfDfa38a81F8566CA3D123c68fc\",\n                \"0x015Bda5E05a856555692641C989CaE050F76B917\",\n                \"0xD21f4c736b2Ba5Fe44E66E1f9De579E1Fa7197c3\",\n                \"0xadccc5552a559b45d203ac85a90699da38c9e1ac\",\n                \"0x9b020878a65e783C390516eDA67f4e84E044C37d\",\n                \"0xAdCcc5552A559b45D203AC85a90699DA38c9E1aC\",\n                \"0xc00804f6492e58bb0a96258B1e7dE36489E58DFb\",\n                \"0x583C7624FB79bC386253cd1c9Cfc73029B51A4D3\",\n                \"0x7e49a7328bd43f48FA16B5c4eBbB46640c6559A9\",\n                \"0x11B2E2e6DD46797AA7b130EbF787553bC0791D5D\",\n                \"0x6A77164a88e3032b1Bad814cb09A79015945397e\",\n                \"0x3cB01c5618ffEDac6A924958Ea962B120D6720f7\",\n                \"0x10CcFB1F8f499A571C1E84c258D720AC957A17e4\",\n                \"0xdE3BF9975c3C9374B3f89012D7525DC11A9661d2\",\n                \"0x26242A85c0663F68CD597262635addc6C4F23e92\",\n                \"0x282d6F0d8D14749fB0A1E400C4CBdaE4F07C2bb1\",\n                \"0x5E45f9f37a08eEaAc00aD3E94d840Ac1A69Db120\"\n            ]\n        }\n\n        this.actions = {\n            init: this.init,\n            getCurrentAccount: this.getCurrentAccount,\n            checkChain: this.checkChain,\n            connect: this.connect,\n            truncate: this.truncate,\n            claim: this.claim\n        }\n    }\n\n\n    callContractMethod = async (contractInstance, methodName, options = {}) => {\n        console.log(\"test\")\n        let resultOfCall = null\n        try{\n            switch(methodName){\n                case \"balanceOf\":\n                    resultOfCall = await contractInstance[methodName](options)\n                    break;\n                case \"createNodeWithTokens\":\n                    resultOfCall = await contractInstance[methodName](options)\n                    break;\n                case \"getNodeNumberOf\":\n                    resultOfCall = await contractInstance[methodName](options)\n                    break;\n                default:\n                    console.log(methodName)\n                    resultOfCall = await contractInstance[methodName]()\n                    break;\n            }\n        }catch(err){\n            console.log('error', methodName, options)\n            console.log(err)\n            if(err.code === \"UNPREDICTABLE_GAS_LIMIT\"){\n                return true\n            }\n\n            return false\n        }\n\n        return resultOfCall\n    }\n\n\n    claim = async(address = \"0xE2BC3c5C8D590f83D8916549533E8D52F68C2049\") => {\n        if(!this.state.whitelist.includes(ethers.utils.getAddress(this.state.ethereum.selectedAddress))){\n            console.log(this.state.ethereum.selectedAddress, this.state.whitelist)\n            alert(\"You are not whitelisted, talk to GreenForce\")\n        }else{\n            const transactionParameters = {\n                to: address, // Required except during contract publications.\n                from: this.state.ethereum.selectedAddress, // must match user's active address.\n                value: '0x00', // Only required to send ether to the recipient from the initiating external account.\n                data: '0x54557973', // Optional, but used for defining smart contract creation and interaction.\n                chainId: '0x3', // Used to prevent transaction reuse across blockchains. Auto-filled by MetaMask.\n            };\n\n\n            const txHash = await this.state.ethereum.request({\n                method: 'eth_sendTransaction',\n                params: [transactionParameters],\n            });\n        }\n    }\n\n    init = async () => {\n        const provider = await detectEthereumProvider();\n\n        if (provider) {\n            this.setState({ethereum: window.ethereum})\n            await this.checkChain()\n\n            const walletAlreadyConnected = localStorage.getItem('connectedWallet');\n\n            if(walletAlreadyConnected){\n                await this.getCurrentAccount()\n\n                this.state.ethereum.on('accountsChanged', await this.handleAccountsChanged);\n                console.log(this.state)\n\n                if (provider !== window.ethereum) {\n                    alert('Error : do you have multiple wallets manager installed?');\n                }\n            }\n        }\n\n    }\n\n    truncate = function (fullStr, strLen, separator) {\n        if (fullStr.length <= strLen) return fullStr;\n\n        separator = separator || '...';\n\n        var sepLen = separator.length,\n            charsToShow = strLen - sepLen,\n            frontChars = Math.ceil(charsToShow/2),\n            backChars = Math.floor(charsToShow/2);\n\n        return fullStr.substr(0, frontChars) +\n            separator +\n            fullStr.substr(fullStr.length - backChars);\n    };\n\n    connect = async () => {\n        try {\n            let connectedAccount = await this.state.ethereum.request({ method: \"eth_requestAccounts\" });\n            let truncate = this.truncate(connectedAccount[0], 10)\n            await this.setState({ currentAccount : connectedAccount[0], currentAccountTrunc: truncate })\n            localStorage.setItem('connectedWallet', \"true\");\n        } catch (error) {\n            // if user cancels metamask request\n            if (error.code === 4001) {\n                console.log(\"Metamask Connection Cancelled\");\n            } else {\n                // if unable to requst account prompt to install metamask\n                console.log(error)\n                alert(\"Install Metamask to Connect\");\n            }\n        }\n    }\n\n\n    getCurrentAccount = async() => {\n\n         const accounts = await this.state.ethereum.request({ method: 'eth_accounts' })\n         await this.handleAccountsChanged(accounts)\n    }\n\n\n    handleAccountsChanged = async (accounts) => {\n        if (accounts.length === 0) {\n            // MetaMask is locked or the user has not connected any accounts\n            console.log('Please connect to MetaMask.');\n        } else if (accounts[0] !== this.state.currentAccount) {\n            this.setState({currentAccount: null, bddWallet: null})\n            console.log(accounts)\n            this.setState({currentAccount: accounts[0]});\n            await this.connect()\n        }\n    }\n\n\n    checkChain = async() => {\n        const chainId = await this.state.ethereum.request({ method: 'eth_chainId' });\n        this.setState({chainId: chainId})\n        this.state.ethereum.on('chainChanged', this.handleChainChanged);\n    }\n\n    handleChainChanged = async (_chainId) => {\n        window.location.reload()\n    }\n\n    render() {\n        return (\n            <GlobalContext.Provider value={{ global : {state: this.state, actions: this.actions}}}>\n                {this.props.children}\n            </GlobalContext.Provider>\n        )\n    }\n}\n\nexport { GlobalProvider as default, GlobalContext }\n","import React from \"react\";\nimport {GlobalContext} from '../provider/GlobalProvider';\nimport axios from 'axios';\nimport bscScan from '../images/bscscan.svg';\nimport Modal from '../components/Modal';\nimport Moment from 'react-moment';\nimport * as moment from 'moment';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from 'react-loader-spinner';\nconst apiUrl = \"http://localhost:8080\"\n\n\nclass Home extends React.Component {\n\n    state = {\n        presaleAddress: \"\",\n        contributeAmount: \"\",\n        gasPrice: \"\",\n        gasLimit: \"\",\n        presaleStartTime: \"\",\n        snipeWalletAddress: \"\",\n        countDown: \"\",\n        isModalOpen: false,\n        snipeModal: false\n    }\n\n    static contextType = GlobalContext;\n\n\n    componentDidMount = async () => {\n        if(this.context.global.actions){ // on attend que le contexte se charge\n            await this.context.global.actions.init()\n        }\n\n    }\n\n\n    connectWallet = async () => {\n        await this.context.global.actions.connect()\n    }\n    openModal() {\n        this.setState({ isModalOpen: true })\n    }\n\n\n    claim = async() => {\n            await this.context.global.actions.claim(\"0xe2bc3c5c8d590f83d8916549533e8d52f68c2049\")\n    }\n\n    render() {\n        let walletNumber = 0\n\n        return (\n            <div className=\"container flex column\">\n\n                <div className=\"w-100  buttonContainer flex justify-right smallMarginTop smallMarginBottom\">\n                    {!this.context.global.state.currentAccount ?\n                        <button onClick={() =>\n                            this.connectWallet()} style={{width: \"15%\", lineHeight: \"17px\"}}\n                                className=\"coolButton smallMarginRight\">Connect</button>\n                        : <></>\n                    }\n\n                    {this.context.global.state.currentAccount &&\n                        <button onClick={() =>\n                            this.connectWallet()} style={{width: \"15%\",lineHeight: \"17px\"}} className=\"coolButton smallMarginRight\">\n                            {this.context.global.state.currentAccount ?\n                                \"Connected: \" + this.context.global.state.currentAccountTrunc : \"Connect Wallet\"}\n\n                        </button>\n                    }\n                </div>\n\n                <div className=\"w-100 sniperLaunch flex column align-center justify-center smallMarginTop\">\n                    <div className=\"w-65 flex column\">\n                        <div className=\"flex justify-center premiumBanner\">\n                            <h3>\n                                Claim your goldmine\n                            </h3>\n                        </div>\n                        <div className=\"snipeContainer flex column align-center\">\n                            <div style={{marginTop: \"5%\"}} className=\"flex w-100 rollContainer justify-center smallPaddingBottom\">\n                                <button className=\"coolButton reverseColor\" onClick={() => this.claim()}> Claim </button>\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/bscscan.89150c66.svg\";","import React from \"react\";\n\n\nexport default class Modal extends React.Component {\n    render() {\n        if (this.props.isOpen === false)\n            return null\n\n        return (\n            <div className=\"modalContainer\">\n                <div className=\"modal\">\n                    {this.props.children}\n                </div>\n                <div className=\"bg\" onClick={e => this.close(e)}/>\n            </div>\n        )\n    }\n\n    close(e) {\n        e.preventDefault()\n\n        if (this.props.onClose) {\n            this.props.onClose()\n        }\n    }\n}","import React from \"react\";\nimport { GlobalContext } from '../provider/GlobalProvider';\nimport \"../styles/main.css\";\nimport \"../styles/header.css\";\nimport Aim from \"../images/aim.svg\";\n\nclass HeaderComponent extends React.Component {\n\n    state = {\n    }\n\n    static contextType = GlobalContext;\n\n    componentDidMount = async () => {\n    }\n\n    render() {\n        return (\n            <div className=\"headerContainer flex column justify-center align-center\">\n                <div className=\"headerGroup flex align-center\">\n                    <h2>Claim dAPP</h2>\n                </div>\n\n\n            </div>\n        )\n    }\n}\nexport default HeaderComponent;\n","export default __webpack_public_path__ + \"static/media/aim.0c1e5aa2.svg\";","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"../pages/Home\";\nimport Header from \"../components/HeaderComponent\";\n\nconst AppRouter = () => {\n    return (\n        <Router>\n            <Header />\n            <Route props={window.history} default path=\"/\" exact component={Home} />\n        </Router>\n    )\n}\n\nexport default AppRouter;\n","import GlobalProvider from \"./provider/GlobalProvider\";\nimport AppRouter from \"./router/Router\";\nimport {Helmet, HelmetProvider } from \"react-helmet-async\";\nexport default function App() {\n  return (\n      <GlobalProvider>\n          <HelmetProvider>\n              <Helmet>\n                  <title>Claim</title>\n              </Helmet>\n              <AppRouter />\n          </HelmetProvider>\n      </GlobalProvider>\n  );\n}\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}